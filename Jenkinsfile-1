pipeline {
    agent {
        label "jenkins-agent"
    }

    tools {
        jdk "Java17"
        maven "Maven3"
    }

    environment {
        APP_Name = "devops-java"
        git_repo_git = "https://github.com/RanjeethAcharya/devops.jar.git"
        DOCKER_USER = "ranjeeth3302"
        DOCKER_PASS = "dockerhub"
        DOCKER_IMAGE = "${DOCKER_USER}" + "/" + "${APP_Name}"
        jenkins_DNS = "ec2-18-209-35-18.compute-1.amazonaws.com"
        JENKINS_API_TOKEN = credentials("JENKINS_API_TOKEN")
    }

    stages {
        stage("Cleanup Workspace") {
            steps {
                cleanWs()
            }
        }

        stage("Git Checkout") {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/main']],
                    userRemoteConfigs: [[credentialsId: 'github', url: "${git_repo_git}"]]
                ])
            }
        }

        stage("Maven Compile, Test, and Package") {
            steps {
                script {
                    sh "mvn compile"
                    sh "mvn test"
                    sh "mvn clean package"
                }
            }
        }

        stage("SonarQube Code Analysis") {
            steps {
                script {
                    withSonarQubeEnv(credentialsId: "sonarqube") {
                        sh "mvn clean verify sonar:sonar -Dsonar.projectKey=java -Dsonar.projectName=java"
                    }
                }
            }
        }

        stage("Nexus Push Artifacts") {
            steps {
                nexusArtifactUploader artifacts: [[artifactId: 'javaArtifactId', classifier: '', file: '/home/ubuntu/workspace/devops-java/server/target/server.jar', type: 'jar']], 
                    credentialsId: 'nexus', groupId: 'java', nexusUrl: '172.31.17.132:8081', nexusVersion: 'nexus3', protocol: 'http', repository: 'java', version: '1.0-SNAPSHOT'
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                script {
                    sh 'docker build -t ${DOCKER_IMAGE} .'
                    docker.withRegistry("", 'dockerhub') {
                        def dockerImage = docker.build("${DOCKER_IMAGE}")
                        dockerImage.push("${BUILD_NUMBER}")
                        dockerImage.push('latest')
                    }
                }
            }
        }

        stage("Trivy Scan") {
            steps {
                script {
                    // Run Trivy vulnerability scan
                    sh "docker run -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image ${DOCKER_IMAGE} --no-progress --scanners vuln --exit-code 0 --severity HIGH,CRITICAL --format table"
                }
            }
        }

        stage("Cleanup Artifacts") {
            steps {
                script {
                    sh "docker rmi ${DOCKER_IMAGE}:${BUILD_NUMBER}"
                    sh "docker rmi ${DOCKER_IMAGE}:latest"
                }
            }
        }

        stage("Trigger CD Pipeline") {
            steps {
                script {
                    sh "curl -v -k --user clouduser:${JENKINS_API_TOKEN} -X POST -H 'cache-control: no-cache' -H 'content-type: application/x-www-form-urlencoded' --data 'BUILD_NUMBER=${BUILD_NUMBER}' '${jenkins_DNS}:8080/job/devops-java/buildWithParameters?token=gitops-token'"
                }
            }
        }
    }
}
