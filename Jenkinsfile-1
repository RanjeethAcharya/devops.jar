pipeline {
    agent {
        label "jenkins-agent"
    }

    tools {
        jdk "Java17"
        maven "Maven3"
    }

    environment {
        git_repo_git = "https://github.com/RanjeethAcharya/devops.jar.git"
        DOCKER_USER = "ranjeeth3302"
        DOCKER_PASS = "dockerhub"
        DOCKER_IMAGE = "ranjeeth3302/devops-java:${BUILD_NUMBER}"
    }

    stages {
        stage("Cleanup Workspace") {
            steps {
                cleanWs()
            }
        }

        stage("Git Checkout") {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/main']],
                    userRemoteConfigs: [[credentialsId: 'github', url: "${git_repo_git}"]]
                ])
            }
        }

        stage("Maven Compile, Test, and Package") {
            steps {
                script {
                    sh "mvn compile"
                    sh "mvn test"
                    sh "mvn clean package"
                }
            }
        }

        stage("SonarQube Code Analysis") {
            steps {
                script {
                    withSonarQubeEnv(credentialsId: "sonarqube") {
                        sh "mvn clean verify sonar:sonar -Dsonar.projectKey=java -Dsonar.projectName=java"
                    }
                }
            }
        }

        stage("Nexus Push Artifacts") {
            steps {
                nexusArtifactUploader artifacts: [[artifactId: 'javaArtifactId', classifier: '', file: '/home/ubuntu/workspace/ci/server/target/server.jar', type: 'jar']], 
                    credentialsId: 'nexus', groupId: 'java', nexusUrl: '172.31.17.132:8081', nexusVersion: 'nexus3', protocol: 'http', repository: 'java', version: '1.0-SNAPSHOT'
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                script {
                    docker.withRegistry("", 'dockerhub') {
                        def dockerImage = docker.build("${DOCKER_IMAGE}")
                        dockerImage.push()
                        dockerImage.push('latest')
                    }
                }
            }
        }
    }
}
